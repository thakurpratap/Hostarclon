{"ast":null,"code":"var _excluded = [\"value\", \"onChange\", \"onKeyDown\", \"country\", \"inputFormat\", \"metadata\", \"inputComponent\", \"international\", \"withCountryCallingCode\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport React, { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { parseIncompletePhoneNumber, formatIncompletePhoneNumber } from 'libphonenumber-js/core';\nimport { getPrefixForFormattingValueAsPhoneNumber, removePrefixFromFormattedPhoneNumber } from './helpers/inputValuePrefix.js';\nimport useInputKeyDownHandler from './useInputKeyDownHandler.js';\nexport function createInput(defaultMetadata) {\n  /**\r\n   * `InputBasic` is the most basic implementation of a `Component`\r\n   * that can be passed to `<PhoneInput/>`. It parses and formats\r\n   * the user's input but doesn't control the caret in the process:\r\n   * when erasing or inserting digits in the middle of a phone number\r\n   * the caret usually jumps to the end (this is the expected behavior).\r\n   * Why does `InputBasic` exist when there's `InputSmart`?\r\n   * One reason is working around the [Samsung Galaxy smart caret positioning bug]\r\n   * (https://github.com/catamphetamine/react-phone-number-input/issues/75).\r\n   * Another reason is that, unlike `InputSmart`, it doesn't require DOM environment.\r\n   */\n  function InputBasic(_ref, ref) {\n    var value = _ref.value,\n      onChange = _ref.onChange,\n      onKeyDown = _ref.onKeyDown,\n      country = _ref.country,\n      inputFormat = _ref.inputFormat,\n      _ref$metadata = _ref.metadata,\n      metadata = _ref$metadata === void 0 ? defaultMetadata : _ref$metadata,\n      _ref$inputComponent = _ref.inputComponent,\n      Input = _ref$inputComponent === void 0 ? 'input' : _ref$inputComponent,\n      international = _ref.international,\n      withCountryCallingCode = _ref.withCountryCallingCode,\n      rest = _objectWithoutProperties(_ref, _excluded);\n    var prefix = getPrefixForFormattingValueAsPhoneNumber({\n      inputFormat: inputFormat,\n      country: country,\n      metadata: metadata\n    });\n    var _onChange = useCallback(function (event) {\n      var newValue = parseIncompletePhoneNumber(event.target.value);\n      // By default, if a value is something like `\"(123)\"`\n      // then Backspace would only erase the rightmost brace\n      // becoming something like `\"(123\"`\n      // which would give the same `\"123\"` value\n      // which would then be formatted back to `\"(123)\"`\n      // and so a user wouldn't be able to erase the phone number.\n      //\n      // This issue is worked around with this simple hack:\n      // when \"old\" and \"new\" parsed values are the same,\n      // it checks if the \"new\" formatted value could be obtained\n      // from the \"old\" formatted value by erasing some (or no) characters at the right side.\n      // If it could then it's likely that the user has hit a Backspace key\n      // and what they really intended was to erase a rightmost digit rather than\n      // a rightmost punctuation character.\n      //\n      if (newValue === value) {\n        var newValueFormatted = format(prefix, newValue, country, metadata);\n        if (newValueFormatted.indexOf(event.target.value) === 0) {\n          // Trim the last digit (or plus sign).\n          newValue = newValue.slice(0, -1);\n        }\n      }\n      onChange(newValue);\n    }, [prefix, value, onChange, country, metadata]);\n    var _onKeyDown = useInputKeyDownHandler({\n      onKeyDown: onKeyDown,\n      inputFormat: inputFormat\n    });\n    return /*#__PURE__*/React.createElement(Input, _extends({}, rest, {\n      ref: ref,\n      value: format(prefix, value, country, metadata),\n      onChange: _onChange,\n      onKeyDown: _onKeyDown\n    }));\n  }\n  InputBasic = /*#__PURE__*/React.forwardRef(InputBasic);\n  InputBasic.propTypes = {\n    /**\r\n     * The parsed phone number.\r\n     * \"Parsed\" not in a sense of \"E.164\"\r\n     * but rather in a sense of \"having only\r\n     * digits and possibly a leading plus character\".\r\n     * Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n     */\n    value: PropTypes.string.isRequired,\n    /**\r\n     * A function of `value: string`.\r\n     * Updates the `value` property.\r\n     */\n    onChange: PropTypes.func.isRequired,\n    /**\r\n     * A function of `event: Event`.\r\n     * Handles `keydown` events.\r\n     */\n    onKeyDown: PropTypes.func,\n    /**\r\n     * A two-letter country code for formatting `value`\r\n     * as a national phone number (e.g. `(800) 555 35 35`).\r\n     * E.g. \"US\", \"RU\", etc.\r\n     * If no `country` is passed then `value`\r\n     * is formatted as an international phone number.\r\n     * (e.g. `+7 800 555 35 35`)\r\n     * This property should've been called `defaultCountry`\r\n     * because it only applies when the user inputs a phone number in a national format\r\n     * and is completely ignored when the user inputs a phone number in an international format.\r\n     */\n    country: PropTypes.string,\n    /**\r\n     * The format that the input field value is being input/output in.\r\n     */\n    inputFormat: PropTypes.oneOf(['INTERNATIONAL', 'NATIONAL_PART_OF_INTERNATIONAL', 'NATIONAL', 'INTERNATIONAL_OR_NATIONAL']).isRequired,\n    /**\r\n     * `libphonenumber-js` metadata.\r\n     */\n    metadata: PropTypes.object,\n    /**\r\n     * The `<input/>` component.\r\n     */\n    inputComponent: PropTypes.elementType\n  };\n  return InputBasic;\n}\nexport default createInput();\nfunction format(prefix, value, country, metadata) {\n  return removePrefixFromFormattedPhoneNumber(formatIncompletePhoneNumber(prefix + value, country, metadata), prefix);\n}","map":{"version":3,"names":["React","useCallback","PropTypes","parseIncompletePhoneNumber","formatIncompletePhoneNumber","getPrefixForFormattingValueAsPhoneNumber","removePrefixFromFormattedPhoneNumber","useInputKeyDownHandler","createInput","defaultMetadata","InputBasic","_ref","ref","value","onChange","onKeyDown","country","inputFormat","_ref$metadata","metadata","_ref$inputComponent","inputComponent","Input","international","withCountryCallingCode","rest","_objectWithoutProperties","_excluded","prefix","_onChange","event","newValue","target","newValueFormatted","format","indexOf","slice","_onKeyDown","createElement","_extends","forwardRef","propTypes","string","isRequired","func","oneOf","object","elementType"],"sources":["/Users/pratapsingh/Library/Mobile Documents/com~apple~CloudDocs/Hotstarproject/desney-plus-hotstar/node_modules/react-phone-number-input/source/InputBasic.js"],"sourcesContent":["import React, { useCallback } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { parseIncompletePhoneNumber, formatIncompletePhoneNumber } from 'libphonenumber-js/core'\r\n\r\nimport { getPrefixForFormattingValueAsPhoneNumber, removePrefixFromFormattedPhoneNumber } from './helpers/inputValuePrefix.js'\r\n\r\nimport useInputKeyDownHandler from './useInputKeyDownHandler.js'\r\n\r\nexport function createInput(defaultMetadata) {\r\n\t/**\r\n\t * `InputBasic` is the most basic implementation of a `Component`\r\n\t * that can be passed to `<PhoneInput/>`. It parses and formats\r\n\t * the user's input but doesn't control the caret in the process:\r\n\t * when erasing or inserting digits in the middle of a phone number\r\n\t * the caret usually jumps to the end (this is the expected behavior).\r\n\t * Why does `InputBasic` exist when there's `InputSmart`?\r\n\t * One reason is working around the [Samsung Galaxy smart caret positioning bug]\r\n\t * (https://github.com/catamphetamine/react-phone-number-input/issues/75).\r\n\t * Another reason is that, unlike `InputSmart`, it doesn't require DOM environment.\r\n\t */\r\n\tfunction InputBasic({\r\n\t\tvalue,\r\n\t\tonChange,\r\n\t\tonKeyDown,\r\n\t\tcountry,\r\n\t\tinputFormat,\r\n\t\tmetadata = defaultMetadata,\r\n\t\tinputComponent: Input = 'input',\r\n\t\t//\r\n\t\t// The rest of the properties listed here are just to get the `rest` props\r\n\t\t// that will be passed to the DOM `<input/>` element.\r\n\t\t//\r\n\t\t// `international` property is deprecated and is not used.\r\n\t\tinternational,\r\n\t\t// `withCountryCallingCode` property is deprecated and is not used.\r\n\t\twithCountryCallingCode,\r\n\t\t...rest\r\n\t}, ref) {\r\n\t\tconst prefix = getPrefixForFormattingValueAsPhoneNumber({\r\n\t\t\tinputFormat,\r\n\t\t\tcountry,\r\n\t\t\tmetadata\r\n\t\t})\r\n\r\n\t\tconst _onChange = useCallback((event) => {\r\n\t\t\tlet newValue = parseIncompletePhoneNumber(event.target.value)\r\n\t\t\t// By default, if a value is something like `\"(123)\"`\r\n\t\t\t// then Backspace would only erase the rightmost brace\r\n\t\t\t// becoming something like `\"(123\"`\r\n\t\t\t// which would give the same `\"123\"` value\r\n\t\t\t// which would then be formatted back to `\"(123)\"`\r\n\t\t\t// and so a user wouldn't be able to erase the phone number.\r\n\t\t\t//\r\n\t\t\t// This issue is worked around with this simple hack:\r\n\t\t\t// when \"old\" and \"new\" parsed values are the same,\r\n\t\t\t// it checks if the \"new\" formatted value could be obtained\r\n\t\t\t// from the \"old\" formatted value by erasing some (or no) characters at the right side.\r\n\t\t\t// If it could then it's likely that the user has hit a Backspace key\r\n\t\t\t// and what they really intended was to erase a rightmost digit rather than\r\n\t\t\t// a rightmost punctuation character.\r\n\t\t\t//\r\n\t\t\tif (newValue === value) {\r\n\t\t\t\tconst newValueFormatted = format(prefix, newValue, country, metadata)\r\n\t\t\t\tif (newValueFormatted.indexOf(event.target.value) === 0) {\r\n\t\t\t\t\t// Trim the last digit (or plus sign).\r\n\t\t\t\t\tnewValue = newValue.slice(0, -1)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tonChange(newValue)\r\n\t\t}, [\r\n\t\t\tprefix,\r\n\t\t\tvalue,\r\n\t\t\tonChange,\r\n\t\t\tcountry,\r\n\t\t\tmetadata\r\n\t\t])\r\n\r\n\t\tconst _onKeyDown = useInputKeyDownHandler({\r\n\t\t\tonKeyDown,\r\n\t\t\tinputFormat\r\n\t\t})\r\n\r\n\t\treturn (\r\n\t\t\t<Input\r\n\t\t\t\t{...rest}\r\n\t\t\t\tref={ref}\r\n\t\t\t\tvalue={format(prefix, value, country, metadata)}\r\n\t\t\t\tonChange={_onChange}\r\n\t\t\t\tonKeyDown={_onKeyDown}/>\r\n\t\t)\r\n\t}\r\n\r\n\tInputBasic = React.forwardRef(InputBasic)\r\n\r\n\tInputBasic.propTypes = {\r\n\t\t/**\r\n\t\t * The parsed phone number.\r\n\t\t * \"Parsed\" not in a sense of \"E.164\"\r\n\t\t * but rather in a sense of \"having only\r\n\t\t * digits and possibly a leading plus character\".\r\n\t\t * Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n\t\t */\r\n\t\tvalue: PropTypes.string.isRequired,\r\n\r\n\t\t/**\r\n\t\t * A function of `value: string`.\r\n\t\t * Updates the `value` property.\r\n\t\t */\r\n\t\tonChange: PropTypes.func.isRequired,\r\n\r\n\t\t/**\r\n\t\t * A function of `event: Event`.\r\n\t\t * Handles `keydown` events.\r\n\t\t */\r\n\t\tonKeyDown: PropTypes.func,\r\n\r\n\t\t/**\r\n\t\t * A two-letter country code for formatting `value`\r\n\t\t * as a national phone number (e.g. `(800) 555 35 35`).\r\n\t\t * E.g. \"US\", \"RU\", etc.\r\n\t\t * If no `country` is passed then `value`\r\n\t\t * is formatted as an international phone number.\r\n\t\t * (e.g. `+7 800 555 35 35`)\r\n\t\t * This property should've been called `defaultCountry`\r\n\t\t * because it only applies when the user inputs a phone number in a national format\r\n\t\t * and is completely ignored when the user inputs a phone number in an international format.\r\n\t\t */\r\n\t\tcountry : PropTypes.string,\r\n\r\n\t\t/**\r\n\t\t * The format that the input field value is being input/output in.\r\n\t\t */\r\n\t\tinputFormat : PropTypes.oneOf([\r\n\t\t\t'INTERNATIONAL',\r\n\t\t\t'NATIONAL_PART_OF_INTERNATIONAL',\r\n\t\t\t'NATIONAL',\r\n\t\t\t'INTERNATIONAL_OR_NATIONAL'\r\n\t\t]).isRequired,\r\n\r\n\t\t/**\r\n\t\t * `libphonenumber-js` metadata.\r\n\t\t */\r\n\t\tmetadata: PropTypes.object,\r\n\r\n\t\t/**\r\n\t\t * The `<input/>` component.\r\n\t\t */\r\n\t\tinputComponent: PropTypes.elementType\r\n\t}\r\n\r\n\treturn InputBasic\r\n}\r\n\r\nexport default createInput()\r\n\r\nfunction format(prefix, value, country, metadata) {\r\n\treturn removePrefixFromFormattedPhoneNumber(\r\n\t\tformatIncompletePhoneNumber(\r\n\t\t\tprefix + value,\r\n\t\t\tcountry,\r\n\t\t\tmetadata\r\n\t\t),\r\n\t\tprefix\r\n\t)\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}